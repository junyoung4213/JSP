[MyBatis 초기 라이브러리 설정]
1) http://github.com/mybatis
	MyBatis 최신버전을 다운로드 한다
2) 압축을 푼다
3) mybatis-3.5.4.jar를 복사한다
4) lib 폴더내의 모든 jar를 복사한다
5) 중복 라이브러리중에 버전이 낮은 것을 삭제한다
	아래 3개 삭제
	javassist-3.16.1-GA.jar
	slf4j-api-1.6.1.jar
	slf4j-simple-1.6.1.jar
	
[MyBatis의 핵심 컴포넌트]
	1) SqlSession
		; 실제 SQL을 실행하는 객체
		이 객체는 내부적으로 SQL을 처리하기 위해 JDBC를 사용한다
	2) SqlSessionFactory
		; SqlSession 객체를 생성함
	3) SqlSessionFactoryBuilder
		; mybatis 설정 파일을 토대로 SqlSessionFactory를 생성함
	4) mybatis 설정 파일
		; 데이터베이스 연결 정보, 트랜잭션 정보, mybatis제어정보
		등의 설정 내용을 포함하고 있음
		SqlSessionFactory를 만들 때 사용됨.
	5) SQL 맵퍼 파일
		; SQL문을 담고 있는 파일, SqlSession 객체가 참조함.
		
[Log4j]
	1) 로그출력등급
		FATAL	: 애플리케이션 중지해야 할 심각한 오류
		ERROR	: 애플리케이션 실행은 되지만 일반적인 오류 발생
		WARN	: 잠재적인 위험 상태
		INFO	: 애플리케이션의 주요 실행 정보
		DEBUG	: 애플리케이션의 내부 실행 상황을 추적해 볼 수 있는 상세 정보
		TRACE	: 디버그보다 더 상세 정보
		
	2) 출력담당자
		org.apache.log4j.ConsoleAppender 	:	콘솔 출력(System.out)
		org.apache.log4j.FileAppender 		:	파일에 저장
		org.apache.log4j.net.SocketAppender :	원격 로그 서버에 LoggingEvent객체 전송
		
	3) 출력형식
		https://logging.apache.org/log4j
		
		org.apache.log4j.SimpleLayout	: '출력 등급 - 메시지' 
										  'DEBUG - DB Connection Error!'
		org.apache.log4j.HTMLLayout		: HTML 테이블 형식으로 출력
		org.apache.log4j.PatternLayout	: 변환 패턴 형식에 따라 출력
										  %5p [%t] - %m%n
										  %5p : 5자리 문자열 
										  %t  : thread 이름 출력
										  %m  : 로그 내용을 출력
										  %n  : 다음 라인 지정
		org.apache.log4j.xml.XMLLayout	: log4j.dtd규칙에 따라 xml로 출력
		