<RequestDispatcher란?>

RequestDispatcher는 클라이언트로부터 최초에 들어온 요청을 JSP/Servlet 내에서
원하는 자원으로 요청을 넘기는(보내는) 역할을 수행하거나, 특정 자원에 처리를 요청하고
처리결과를 얻어오는 기능을 수행하는 클래스이다. 즉, /a.jsp 로 들어온 요청을
/a.jsp 내에서 RequestDispatcher를 사용하여 b.jsp로 요청을 보낼 수 있다. 또는 a.jsp에서
b.jsp로 처리를 요청하고 b.jsp에서 처리한 결과 내용을 a.jsp의 결과에 포함시킬 수 있다.
요청을 보내는 방법으로는 forward()와 include() 두 가지 방법이 있다.

<RequestDispatcher가 있는 이유? HttpServletResponse#sendRedirect() 와의 차이점?>

HttpServletResponse를 사용하면 sendRedirect() 메서드를 이용하여 지정한 경로로
제어를 이동시킬 수 있다. 그러나 sendRedirect()는 HTTP 리다이렉션을 이용하기 때문에
하나의 요청 범위 안에서 처리를 하는 것이 아니라, 브라우저에게 Response 후 
브라우저측에서 지정받은 요청 경로로 다시 재요청을 하는 방식이기에 두 번의 
HTTP 트랜잭션이 발생하며, 서버측에서는 최초에 받은 요청중에 처리한 내용을
리다이렉트 된 요청안에서 공유할 수 없는 문제가 있다.

물론 sendRedirect() 에서도 쿠키가 세션등을 이용해 특정 상태를 유지하여 공유할 수
있으나, 상황에 따라 제한적일 수 있으며 코드 레벨에서의 알고리즘 등을 곧바로 
이어가는 데에도 한계가 있기 때문에 좋은 방법이라고는 할 수 없다.

그 대신, HttpServletResponse를 통해 리다이렉트 하는 방식은 현재 어플리케이션 이외에
다른 자원의 경로를 요청할 수 있는 반면, 
RequestDispatcher는 *현재 처리중인 서블릿이 속해 있는 웹 어플리케이션 범위 내에서만* 
요청을 제어할 수 있다.

<RequestDispatcher 생성(얻는) 방법>
RequestDispatcher는 ServletContext나 ServletRequest 클래스에서 제공하는
팩토리 메서드(Factory Method)를 통해 얻을 수 있다.
팩토리 메서드라는 용어에 대한 것은 디자인 패턴을 참고하면 된다.

1. ServletContext를 통해서 얻는 법
서블릿 클래스에서 ServletContext를 사용하여 RequestDispatcher를 얻을 수 있다.

1-1 호출 대상을 web.xml에 지정한 서블릿 이름(<servlet-name>)으로 지정하는 방법
ServletContext context = this.getServletContext();
RequestDispatcher dispatcher = context.getNamedDispatcher("helloServlet");

1-2 호출 대상을 URL 경로로 지정하는 방법. 웹 어플리케이션 루트경로를 기준으로
     절대 경로만 지정할 수 있다.
ServletContext context = this.getServletContext();
RequestDispatcher dispatcher = context.getRequestDispatcher("/hello");

1-3 JSP 페이지에서는 application 기본 객체를 이용한다.
<%
	RequestDispatcher dispatcher = application.getRequestDispatcher("/hello");
%>

2 ServletRequest를 통해서 얻는 법
서블릿 클래스에서는 service() 메서드나 doGet() doPost() 등에서 ServletRequest의 
하위 클래스인 HttpServletRequest를 매개변수로 받기 때문에 이것을 이용하여
RequestDispatcher를 얻을 수 있다. HttpServletRequest에서는 URL 경로를 통해서
대상을 지정하는 한가지 방법만을 제공한다. 그러나 ServletContext를 통해서
대상을 지정할 때와는 다르게 절대 경로 및 상대경로 모두 지정이 가능하다.
JSP페이지에서도 ServletRequest의 인스턴스인 request 기본객체가 있으므로 쉽게 얻을 수 있다.

RequestDispatcher dispatcher = request.getRequestDispatcher("/hello");

<RequestDispatcher의 forward() 메서드>
forward() 메서드는 대상 자원으로 제어를 넘기는 역할을 한다. 브라우저에서 /a.jsp로 요청했을 때
/a.sjp에서 forward()를 실행하여 /b.jsp로 제어를 넘길 수 있다. 제어를 넘겨받은 /b.jsp는 처리 결과를
최종적으로 브라우저에게 출력한다. 브라우저 입장에서는 /a.jsp를 요청했지만 받은 결과는 /b.jsp의 결과다.
이 때 HTTP 리다이렉트 방식과는 달리 하나의 HTTP 요청(Request) 범위 안에서 동작이 이루어진다.

<forward() 사용시 주의할 점>
forward()는 제어를 넘기기 이전에 출력 버퍼를 비우기 때문에 a.jsp -> b.jsp로 호출시 
a.jsp에서 어떤 내용을 버퍼에 출력했더라도 무시되며 제어가 넘어간 b.jsp의 출력 내용만 
브라우저에게 전달되므로 주의하도록 한다.

<JSP 페이지에서 사용시>
<%
	RequestDispatcher dispatcher = application.getRequestDispatcher("/hello");
	dispatcher.forward(request, response);
%>

<RequestDispatcher의 include() 메서드>
RequestDispatcher의 메서드 중 하나인 include() 메서드는 처리 흐름 제어를 특정 대상에게 넘기고
대상이 처리한 결과를 현재 페이지에서 처리한 결과에 포함시키는 기능을 한다.

include() 메서드의 선언부를 보면 다음과 같이 매개변수로 ServletRequest 객체와 ServletResponse 객체를
넘기는 것을 알 수 있다. 우리가 작성하는 서블릿 또는 JSP 페이지에는 이 둘을 상속받은
HttpServletRequest와 HttpServletResponse를 사용하므로 이 둘을 include() 메서드 호출시에 넘겨주면 된다.

public void include(ServletRequest request, ServletResponse response) throws ServletException, IOException;

<forward()와의 동작 방식>
forward() 메서드와는 달리 include() 메서드는 제어를 넘긴 대상 페이지의 처리가 완료된 이후 
결과와 함께 원래 페이지로 제어가 되돌아오고 이후 나머지 처리를 하게 된다. 즉, forward() 메서드는
포워딩된 대상 페이지가 최종 결과를 출력했다면 include() 메서드는 최초 흐름이 시작된 페이지(a.jsp)가
브라우저로 최종 결과를 출력한다.

include() 호출시에는 HttpServletRequest와 HttpServletResponse를 매개변수로 넘겨주는데 
이 두개의 객체를 호출하는 페이지와 호출받는쪽에서 공유하기 때문에 서로 데이터를 이 두 객체에 담아
공유할 수 있다.

또한 브라우저로 데이터를 출력하는 출력스트림(PrintWriter out 객체)도 하나의 객체를 공유하므로
출력 결과를 포함시키는것처럼 보이게 된다. 
forward()메서드에서는 제어를 호출하는 페이지로 넘기기 전에
출력버퍼의 내용을 비워버리고 제어를 넘기지만 include()는 출력버퍼를 비우지 않기 때문에 호출하는 페이지에서
출력하는 내용에 이어서 호출되는 페이지에서 출력하는 내용까지 포함시킬 수 있다.

출처: https://dololak.tistory.com/506